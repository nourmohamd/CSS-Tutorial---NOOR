/* Start CSS Rules */
/* CSS Colors */
div {
  /* By Uses Words */
  background-color: red;
  /* By Uses Hexa Colors */
  background-color: #ffffff;
  background-color: #ff0000;
  background-color: #00ff00;
  background-color: #0000ff;
  background-color: #000000;
  /* background-color: rgb(red, green, blue); */
  background-color: rgb(255, 255, 255);
  background-color: rgb(255, 0, 0);
  background-color: rgb(0, 255, 0);
  background-color: rgb(0, 0, 255);
  background-color: rgb(0, 0, 0);
  /* background-color: hsl(hue, saturation, lightness); */
  background-color: hsl(360, 100%, 50%);
  background-color: hsl(240, 100%, 50%);
  background-color: hsl(120, 100%, 50%);
  /* Alpha */
  /* background-color: rgba(red, green, blue, alpha); */
  background-color: rgba(255, 255, 255, 1);
  /* background-color: hsla(hue, saturation, lightness, alpha); */
  background-color: hsla(360, 100%, 50%, 1);
}

/* CSS Background */
div {
  background-color: red;
  background-image: url("../img/W.jpg");
  background-size: cover; /* cover, contain, auto, Xpx Ypx, XYpx */
  background-repeat: no-repeat;
  background-attachment: fixed; /* scroll | fixed | local */
  background-position: left center; /* First Value is One Of (left, center, right) And Second Value is One Of (top, center, bottom) */
  background-position-x: left;
  background-position-y: center;
  background-blend-mode: difference;
  /* 
  Concat background-color and background-image
  background: url1, url2, ... color
  */
}

/* CSS Rules */
div {
  /* Padding */
  padding: 10px 10px 10px 10px; /* top right bottom left */
  padding: 10px 10px 10px;
  padding: 10px 10px;
  padding: 10px;
  padding-left: 10px;
  padding-right: 10px;
  padding-bottom: 10px;
  padding-top: 10px;
  padding-inline: 10px;
  padding-inline-start: 10px;
  padding-inline-end: 10px;
  padding-block: 10px;
  padding-block-start: 10px;
  padding-block-end: 10px;
  /* Margin */
  margin: 10px 10px 10px 10px;
  margin: 10px 10px 10px;
  margin: 10px 10px;
  margin: 10px;
  margin-left: 10px;
  margin-right: 10px;
  margin-bottom: 10px;
  margin-top: 10px;
  margin-inline: 10px;
  margin-inline-start: 10px;
  margin-inline-end: 10px;
  margin-block: 10px;
  margin-block-start: 10px;
  margin-block-end: 10px;
  /* Border */
  border-width: 10px;
  border-style: solid;
  border-color: red;
  border-top: 1px solid red;
  border-right: 1px solid red;
  border-bottom: 1px solid red;
  border-left: 1px solid red;
  border-inline: 1px solid red;
  border-inline-start: 1px solid red;
  border-inline-end: 1px solid red;
  border-block: 1px solid red;
  border-block-start: 1px solid red;
  border-block-end: 1px solid red;
  border-top-width: 1px;
  border-top-style: solid;
  border-top-color: red;
  border-left-width: 1px;
  border-left-style: solid;
  border-left-color: red;
  border-bottom-width: 1px;
  border-bottom-style: solid;
  border-bottom-color: red;
  border-right-width: 1px;
  border-right-style: solid;
  border-right-color: red;
  /* CSS Outline */
  outline-width: 10px;
  outline-style: solid;
  outline-color: red;
  outline: 10px solid red;
  outline-offset: 10px;
  /* CSS Display */
  display: block;
  display: inline;
  display: inline-block;
  /* CSS Hidden */
  display: none;
  visibility: hidden;
  /* Show Element */
  display: block;
  visibility: visible;
  /* CSS Size */
  width: 100px;
  min-width: 100px;
  max-width: 100px;
  height: 100px;
  min-height: 100px;
  max-height: 100px;
  /* CSS Overflow */
  overflow: auto;
  overflow: scroll;
  overflow: visible;
  overflow: hidden;
  overflow-x: auto;
  overflow-x: scroll;
  overflow-x: visible;
  overflow-x: hidden;
  overflow-y: auto;
  overflow-y: scroll;
  overflow-y: visible;
  overflow-y: hidden;
}

/* CSS Text */
div {
  color: red;
  /* text-shadow: h-shadow v-shadow blur color */
  text-shadow: 0px 0px 10px red;
  /* text-align: center | left | start | end | right | justify; */
  text-align: center;
  /* direction: ltr | rtl */
  direction: rtl;
  /* text-decoration: none | upline underline */
  text-decoration: none;
  /* text-transform: capitalize | uppercase | lowercase */
  text-transform: capitalize;
  /* letter-spacing */
  letter-spacing: 10px;
  /* text-indent */
  text-indent: 10px;
  /* line-height: 1.0 | 1px | 100% */
  line-height: 1.6;
  /* word-spacing */
  word-spacing: 10px;
  /* white-space */
  white-space: nowrap;
  white-space: normal;
  white-space: pre;
  /* word-break */
  word-break: normal;
  word-break: break-all;
  word-break: break-word;
  /* text-overflow */
  text-overflow: clip; /* default value */
  text-overflow: ellipsis;
  /* inherit */
  color: inherit;
  /* Fonts */
  font-family: "Franklin Gothic Medium", "Arial Narrow", Arial, sans-serif;
  font-size: 10px;
  font-weight: bold;
  font-style: italic;
  font-variant: small-caps;
  /* CSS Rules ===> px, %, em, rem, vh, vw */
  /* cursor */
  cursor: pointer;
  /* Float: left | right , Clear: left | right | both */
  float: left;
  clear: both;
  /* Calculation: calc((100% - 20px) / 5) */
  /* Opacity: 0.0 (hidden) ===> 1.0(Show) */
  /* Position, left, right, top, bottom */
  position: static;
  position: relative;
  position: absolute;
  position: fixed;
  position: sticky;
  left: 0px;
  top: 0px;
  bottom: 0px;
  right: 0px;
  /* z-index Layers System */
  z-index: -1;
  z-index: 0;
  z-index: 1;
  /* list */
  list-style-type: decimal;
  list-style-position: inside;
  list-style-position: outside;
  list-style-image: url("../img/W.jpg");
  list-style: none;
  /* CSS Table */
  border-spacing: 0px;
}

/* p ==> text + img | img + text | text + img + text; */
img {
  vertical-align: top;
  vertical-align: middle;
  vertical-align: bottom;
}

/* Pseudo Classes */
:hover {
}

:empty {
}

:checked {
}

:visited {
}

:focus {
}

/* Pseudo Elements */
::first-letter {
}

::first-line {
}

::before {
  content: "";
}

::after {
  content: "";
}

::selection {
}

/* Add Countre */
div {
  counter-increment: a;
}

div::before {
  content: counter(a);
}

div::after {
  content: attr(data-color);
}

/* Vendor Prefixes */
/* -webkit ==> Google Chrome, New Opera, Safari */
/* -o ==> Old Opera */
/* -ms ==> ie, edge */
/* -moz ==> firfox */

/* Another Rules */
div {
  /* Border-Radius */
  border-radius: 10px;
  border-top-left-radius: 10px;
  border-top-right-radius: 10px;
  border-bottom-left-radius: 10px;
  border-bottom-right-radius: 10px;
  /* Box-Shadow: h-shadow v-shadow blur spread color Type Direction(inset | null) */
  box-shadow: 0px 0px 10px 10px red inset;
  /* Box modeal ===> margin, border, padding, content */
  /* box-sizing */
  box-sizing: border-box;
  /* Transition */
  transition-property: width;
  transition-duration: 1s;
  transition-duration: 1000ms;
  transition-delay: 1s;
  transition-delay: 1000ms;
  transition-timing-function: ease;
  transition-timing-function: ease-in;
  transition-timing-function: ease-out;
  transition-timing-function: ease-in-out;
  transition-timing-function: linear;
  transition: width 1s 1s linear; /* Shorthand */
  /* !important */
  color: red !important;
  /* margin-collapse ==> Only For Vertical */
}

/* Variable */

@property --main-color {
  syntax: "<color>";
  inherits: true;
  initial-value: lightgray;
}

:root {
  --mainColor: red;
}

div {
  /* Localy Variable */
  --mainColor: black;
  color: var(--mainColor, red);
}

/* Flex Box */
.parent {
  display: flex;
  display: inline-flex;
  /* flex-direction: row(default) | row-reverse | column | column-reverse */
  flex-direction: column;
  /* flex-wrap: wrap | nowrap(default)| wrap-reverse */
  flex-wrap: wrap;
  /* flex-flow: direction | wrap */
  flex-flow: column wrap;
  /* justify-content: flex-start|flex-end|center|space-between|space-around|space-evenly */
  justify-content: center;
  /* align-items: stretch(default)|flex-start|flex-end|center */
  /* it works reverse The Direction */
  align-items: center;
  /* align-content: stretch|flex-start|flex-end|center|space-between|space-around|space-evenly */
  align-content: flex-start;
}

.parent .child {
  /* flex-grow: 0(default) */
  flex-grow: 1;
  /* flex-shrink: 1(default) */
  flex-shrink: 2;
  /* order: number */
  order: 1;
  /* flex-basis: px|%|em|rem|vh|vw */
  /* it works with dircetion if row ==> width else if column ==> height */
  flex-basis: 10px;
  /* Shorthand */
  /* flex: [flex-grow] [flex-shrink] [flex-basis] */
  flex: 1 2 10px;
  /* Notice: Don't Use flex-grow with flex-shrink or reverse */
}

/* Use Flex Froge Game For FLex */

/* CSS Filters */
img {
  /* filter:
  brightness(%) سطوع,
  contrast(%) تباين,
  blur(px) ضباب,
  grayscale(%) أبيض و أسود,
  opacity(0.0(hidden) ==> 1.0(show)) غموض,
  sepia(%) بني داكن,
  saturate(Number From 0 until infenite) تشبع الصورة,
  invert(%) اللواطي عكس الألوان,
  none إلغاء وضع الفيلتر
  dropshadow(h-shadow v-shadow blur color)
  */
  /* لإضافة أكثر من فلتر لنفس الصورة قم بفضل القيم بفاصلة */
}

/* Linear-Gradient */
div {
  /* linear-gradient(direction: to top 0deg|to right 90deg|to bottom 180deg|to left 270deg,color نسبة مئوية للون, ...) */
  width: 100px;
  height: 10px;
  background-image: linear-gradient(
    to top,
    red 20%,
    blue 20%,
    blue 40%,
    yellow 40%,
    yellow 60%,
    pink 60%,
    pink 80%,
    white 80%
  );
  background-image: linear-gradient(to bottom, red, blue);
}

/* Caret-Color */
input {
  caret-color: red;
}

/* Pointer-Events */
div {
  pointer-events: auto;
}

/* Grid System */
.parent {
  /* Start Grid */
  display: grid;
  display: inline-grid;
  /* grid-template-columns (px, %, fr, auto, vw, vh, em, rem, ...) */
  grid-template-columns: 100px 20% 1fr auto auto;
  grid-template-columns: 100px 20% 1fr repeat(2, auto);
  grid-template-columns: repeat(3, 1fr) repeat(2, auto);
  /* grid-template-rows (px, %, fr, auto, vw, vh, ...) */
  grid-template-rows: repeat(2, 1fr);
  /*Like grid-template-columns*/
  /* grid-template: grid-template-rows grid-template-columns | grid-template-areas | none */
  grid-template: repeat(2, 1fr) repeat(3, 1fr) repeat(2, auto);
  /* Gap */
  row-gap: 10px;
  column-gap: 10px;
  grid-gap: 10px;
  gap: 10px 10px; /* Row Column | Row&&Column */
  gap: 10px;
  /* 
  justify-content: Like flex
  flex start(default) | flex-end | center | space-between | space-around | space-evenly
  */
  /* 
  align-content: Like flex
  stretch(default) | flex start | flex-end | center | space-between | space-around | space-evenly
  */
  /* grid-template-areas: "row1" "row2" "row3"
  Each Row writes by form  "[Name By Element] [Name By Element] [Name By Element] ..."
  if you want to set column empty only write place it dot [.]
  in Child we write For in each element : grid-area: Name By Element;
  */
}

/* Grid Children */
.child {
  /* grid-column */
  grid-column: 1/5;
  /* It takes four columns Becouse Not Including End */
  grid-column-start: 1;
  grid-column-end: 5;
  grid-column: 4 span;
  /* It takes four columns */
  grid-column: 2/3 span;
  /* It takes Three columns start second column */

  /* grid-row */
  grid-row: 1/5;
  /* It takes four Rows Becouse Not Including End */
  grid-row-start: 1;
  grid-row-end: 5;
  grid-row: 4 span;
  /* It takes four Rows */
  grid-row: 2/3 span;
  /* It takes Three Rows start second Row */

  /* ###################### */
  /* We Can Select Number Of Columns Only With grid-template-columns attribute */
  /* ###################### */

  /* grid-area: Start Row/ Start Column / End Row / End Column But Not Including End in Row And Column */
  grid-area: header;
  grid-area: 2 / 2 / 4 / 6;
  grid-area: 2 span 2 span;
  grid-row-start: 2;
  grid-column-start: 2;
  grid-row-end: 4;
  grid-column-end: 6;
}

/* minmax and (Responsive) */
.parent {
  grid-template-columns: minmax(200px, 400px) repeat(2, 1fr);
  grid-template-columns: repeat(auto-fill, 200px);
  grid-template-columns: repeat(auto-fill, minmax(200px, 400px));
  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
}

/* Order */
.child {
  order: -1;
  order: 0;
  order: 1;
}

/* Transform */
.element {
  /*2D*/ /*scaleشدالعنصر*/
  transform: scaleX(1);
  /*Default1*/
  transform: scaleY(1);
  /*Default1*/
  transform: scale(1);
  transform: scale(1, 1);
  /*DefaultX==>1,Y==>1|X,Y1*/
  transform: scaleX(2);
  /*ifthevaluewasnegative==>reverseElementX|Y*/ /*Rotate*/ /*360deg|6.28rad|400grad|1turn*/
  transform: rotateX(20deg);
  transform: rotateX(-20deg);
  transform: rotateY(20deg);
  transform: rotateY(-20deg);
  /*ShorthandForScaleandrotate*/
  transform: scale(1, 1) rotate(20deg);
  /*TranslateForMoveElementToAnyPlace*/
  transform: translateX(10px);
  transform: translateX(-10px);
  transform: translateY(10px);
  transform: translateY(-10px);
  transform: translate(10px);
  transform: translate(10px, 10px);
  /*Skew*/
  transform: skewX(20deg);
  transform: skewY(20deg);
  transform: skew(20deg);
  transform: skew(20deg, 40deg);
  /*ifThereisOneValue==>X,Y=0*/ /*ifThereAretowValues==>X,Y*/ /*Matrix(scaleX,skewY,skewX,scaleY,translateX,translateY)*/
  transform: matrix(1, 10deg, 20deg, 1, 10px, -10px);
  /*origin*/ /*For2D*/
  transform-origin: 50% 50%;
  transform-origin: center center;
  /*FirstValueForX===>px,em,rem,vh,vw,%,left,center,right*/ /*SecondValueForY===>px,em,rem,vh,vw,%,top,center,bottom*/
  transform-origin: left top;
  transform-origin: left center;
  transform-origin: left bottom;
  transform-origin: center top;
  transform-origin: center center;
  transform-origin: center bottom;
  transform-origin: right top;
  transform-origin: right center;
  transform-origin: right bottom;
  /*3D*/ /*Rotate*/
  transform: rotateX(20deg);
  transform: rotateY(20deg);
  transform: rotateZ(20deg);
  transform: rotate3d(1, 1, 1, 20deg);
  /*X,Y,Z,زاوية*/ /*Translate*/
  transform: translateX(10px);
  transform: translateY(10px);
  transform: translateZ(10px);
  transform: translate3d(10px, 10px, 10px);
  /*X,Y,Z*/ /*ButWhenyouusetranslateZyoushoudputAttributeCalldeitprespectiveForParentElement*/
  perspective: 300px;
  /*prespective-originliketransform-origin*/
  perspective-origin: left bottom;
  /*backface-visibilityWhenwerotateTheelementweputThisCSSattributeforhiddenorvisibleBackELement*/
  backface-visibility: hidden;
  backface-visibility: visible;
  /*ForExample:   HTML     <div class="parent">      <div class="front face"></div>      <div class="back face"></div>    </div>  CSS    .parent ;
  -webkit-transform: matrix(1, 10deg, 20deg, 1, 10px, -10px);
  -moz-transform: matrix(1, 10deg, 20deg, 1, 10px, -10px);
  -ms-transform: matrix(1, 10deg, 20deg, 1, 10px, -10px);
  -o-transform: matrix(1, 10deg, 20deg, 1, 10px, -10px);
{
      prespective: 300px;
      position: relative;
      width: 200px;
      height: 200px;
      transform-style: preserve-3d; This Attribute Use When 3D Default Value is (flat)
      transition: 1s;
    }
    .parent:hover {
    transform: rotateY(-180deg);
    }
    .parent .face {
      position: absolute;
      width: 100%;
      height: 100%;
      display: flex;
      justify-content: center;
      align-items: center;
      color: white;
      backface-visibility: hidden;
    }
    .front {
      background-color: red;
    }
    .back {
      background-color: orange;
      transform: rotateY(180deg);
    }
  */
}

/* Animation */
@keyframes anim2 {
  from {
    color: red;
  }

  to {
    color: black;
  }
}

@keyframes anim2 {
  10% {
    color: blue;
  }

  20% {
    color: green;
  }

  60% {
    color: rgb(105, 102, 95);
  }

  100% {
    color: white;
  }
}

/* خواص الأنيميشن */
/* 
animation-name: name;
animation-duration : 1s | 1000ms;
animation-delay: 1s | 1000ms;
animation-timing-function: ease|ease-in|ease-out|ease-in-out|linear;
animation-iteration-count: infinite | number;
animation-direction: alternate| normal(default) | reverse | alternate-reverse;
animation-fill-mode: none(default) | forward | backward | both;
animation-play-state: running | paused;
animation: name duration delay timing-function iteration-count direction fill-mode play-state
*/

/* All Selectors */
p {
}

.p {
}

#p {
}

div p {
}

* {
}

.parent .child {
}

.parent.child {
}

.parent p {
}

.p1,
.p2 {
}

p.a {
}

p#a {
}

.parent > p {
}

p + h2 {
}

p ~ h2 {
}

[href] {
}

p[title] {
}

[title="paragraph"] {
}

p[title~="paragraph"] {
}

p[title*="paragraph"] {
}

p[title^="paragraph"] {
}

p:first-child {
}

p:last-child {
}

p:first-of-type {
}

p:last-of-type {
}

p:only-child {
}

p:only-of-type {
}

p:not(:first-child) {
}

p:not(.nour) {
}

p:nth-child(2) {
}

p:nth-child(odd) {
}

p:nth-child(even) {
}

p:nth-last-child(1) {
}

p:nth-of-type(2) {
}

p:nth-last-of-type(2) {
}

:root {
}

:checked {
}

:empty {
}

:hover {
}

:focus {
}

:disabled {
}

:required {
}

:visited {
}

::selection {
}

::placeholder {
}
/* 
...
...
...
.
.
.
And Other Psuedo
*/
/* Media Queries */
@media print {
}

@media only screen and (max-width: 767px) {
}

@media only screen and (min-width: 767px) and (max-width: 1000px) {
}

@media (max-width: 767px) {
}

@media (max-width: 767px) and (max-width: 1000px) {
}

/* Container */
.container {
  padding-inline: 15px;
  margin-inline: auto;
}

@media (max-width: 767px) {
  .container {
    width: 100%;
  }
}

@media (min-width: 768px) {
  .container {
    width: 750px;
  }
}

@media (min-width: 992px) {
  .container {
    width: 970px;
  }
}

@media (min-width: 1200px) {
  .container {
    width: 1170px;
  }
}

/* Global Values */
p {
  /* Inheritance */
  color: inherit;
}

p {
  /* Default */
  color: initial;
}

p {
  /* if (inherit) inherit else if (not inherit) initial */
  color: unset;
}

p {
  /* return settings user-agent */
  color: revert;
}

/* Example For linear-gradient :
HTML
  <div class="no"></div>
CSS
  .no {
    position: relative;
  }
  .no::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    height: 30px;
    width: 100%;
    background-image:
    linear-gradient(135deg, white 25%,transparent 25%),
    linear-gradient(226deg, white 25%,transparent 25%);
    background-size: 30px 30px;
  }
*/
/* textarea */
textarea {
  resize: none;
  width: 100px; /* Same The cols Attribute */
  height: 100px; /* Same The rows Attribute */
}

/* outline-offset ==> Space between border and outline */
p {
  border: 1px solid red;
  outline: 1px solid red;
  outline-offset: 10px;
}

/* Scrolling */
::-webkit-scrollbar {
}

::-webkit-scrollbar-thumb {
}

::-webkit-scrollbar-track {
}

::-webkit-scrollbar-track-piece {
}

::-webkit-scrollbar-corner {
}

::-webkit-scrollbar-button {
}

::-webkit-resizer {
}

/* apperance */
input {
  -webkit-appearance: none;
  appearance: none;
}

/* focus-within */
div:focus-within i {
  color: black;
}

/* mix-blend-mode */
p {
  mix-blend-mode: difference;
}

/* جعل الصورة كلون للنص */

p {
  color: transparent;
  background-image: url("../img/W.jpg");
  -webkit-background-clip: text;
}

/* إضافة بوردر للنص */
p {
  -webkit-text-stroke-width: 2px;
  -webkit-text-stroke-width: thin;
  -webkit-text-stroke-width: thick;
  -webkit-text-stroke-width: medium;
  -webkit-text-stroke-color: red;
  -webkit-text-stroke: 2px red;
}

/* End CSS Rules */

/* New CSS Attributes */

/* Nesting */
.parent {
  p {
    background-color: blue;
  }

  a {
    i {
      color: red;
    }
  }
  &:hover {
    color: black;
  }
}

/* Border-block */
p {
  border-block: 5px solid red;
  /* يحافظ على موقعه حتى لو تم فتل العنصر سيفتل مع العنصر */
  writing-mode: vertical-lr;
}

/* Psuedo Class Where */
.parent :where(p, h2, q, blockquote) {
  color: red;
}

.parent :where(p, h2, q, blockquote) :where(span, input) {
  color: red;
}

/* Blanced-Text */
p {
  /* التوازن بين عدد الأحرف في كل سطر مع بقية الأسطر */
  text-wrap: balance;
  /* إلتفاف النص */
  text-wrap: wrap;
  /* عدم إلتفاف النص */
  text-wrap: nowrap;
  /* الحالة الأفتراضية */
  text-wrap: normal;
}

/* Psuedo Class has */
/* يعمل كمبدأ الشرط إذا تحقق يطبق الكود على العنصر الذي استدعا ال 
  has */
.parent:has(a, span) {
}

.parent:has(a):has(span) {
}

.parent:has(+ form) {
}

/* Nth Of Child */
.parent :nth-child(1 of p) {
  color: red;
}

/* Is */

:is(div, p, h2) a {
  color: red;
}

:is(div, p, h2) :is(a, span) {
  color: red;
}

/* Decorating Text ==> Use For Any Element */

a {
  text-decoration: none;

  text-decoration-line: overline;
  text-decoration-line: line-through;
  text-decoration-line: underline;

  text-decoration-style: wavy;

  text-decoration-color: red;
}

/* Current Color Keyword */
.parent {
  color: red;
  border: 1px solid currentColor;
}

.parent .child {
  color: currentColor;
  border: inherit;
  border: 2px dotted currentColor;
}

/* Empty Psuedo Class */

p:empty {
}

:empty {
}

/* User Select All Text */

p {
  user-select: none;
  user-select: all;
}

/* Outline-Offset */

p {
  border: 2px solid red;
  outline: 2px solid blue;
  outline-offset: 2px;
}

/* Scroll Padding & Margin */
html {
  scroll-behavior: smooth;
  scroll-margin-top: 1px;
  scroll-margin-left: 1px;
  scroll-margin-bottom: 1px;
  scroll-margin-right: 1px;
  scroll-margin-inline: 1px;
  scroll-margin-inline-start: 1px;
  scroll-margin-inline-end: 1px;
  scroll-margin-block: 1px;
  scroll-margin-block-start: 1px;
  scroll-margin-block-end: 1px;

  scroll-padding-top: 1px;
  scroll-padding-left: 1px;
  scroll-padding-bottom: 1px;
  scroll-padding-right: 1px;
  scroll-padding-inline: 1px;
  scroll-padding-inline-start: 1px;
  scroll-padding-inline-end: 1px;
  scroll-padding-block: 1px;
  scroll-padding-block-start: 1px;
  scroll-padding-block-end: 1px;
}

/* Marker Psuedo Element */

ul {
  list-style: none;
}

/* 1 */
ul li::before {
  content: "\2022";
  color: green;
  display: inline-flex;
  margin-right: 10px;
}

/* 2 */

ul li::before {
  content: "";
  margin-right: 10px;
  background-color: yellow;
  width: 8px;
  height: 8px;
  border-radius: 50%;
  display: inline-flex;
}

/* 3 */

ul li::marker {
  color: red;
}

/* 4 */

ul li::marker {
  content: "@";
  color: red;
}
